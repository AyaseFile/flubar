// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.9.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/cue.dart';
import 'api/ffmpeg.dart';
import 'api/id3.dart';
import 'api/lofty.dart';
import 'api/models.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({
    required RustLibApi api,
  }) {
    instance.initMockImpl(
      api: api,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.9.0';

  @override
  int get rustContentHash => -1356582635;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'rust_lib_flubar',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class RustLibApi extends BaseApi {
  Future<List<(String, Metadata, Properties)>> crateApiCueCueReadFile(
      {required String file});

  Future<void> crateApiId3Id3WriteMetadata(
      {required String file, required Metadata metadata});

  Future<void> crateApiId3Id3WritePicture(
      {required String file, Uint8List? picture});

  Future<void> crateApiFfmpegInitFfmpeg();

  Future<void> crateApiLoftyLoftyWriteMetadata(
      {required String file, required Metadata metadata, required bool force});

  Future<void> crateApiLoftyLoftyWritePicture(
      {required String file, Uint8List? picture, required bool force});

  Future<(Metadata, Properties)> crateApiFfmpegReadFile({required String file});
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<List<(String, Metadata, Properties)>> crateApiCueCueReadFile(
      {required String file}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(file, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 1, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_list_record_string_metadata_properties,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiCueCueReadFileConstMeta,
      argValues: [file],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiCueCueReadFileConstMeta => const TaskConstMeta(
        debugName: "cue_read_file",
        argNames: ["file"],
      );

  @override
  Future<void> crateApiId3Id3WriteMetadata(
      {required String file, required Metadata metadata}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(file, serializer);
        sse_encode_box_autoadd_metadata(metadata, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 2, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiId3Id3WriteMetadataConstMeta,
      argValues: [file, metadata],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiId3Id3WriteMetadataConstMeta =>
      const TaskConstMeta(
        debugName: "id3_write_metadata",
        argNames: ["file", "metadata"],
      );

  @override
  Future<void> crateApiId3Id3WritePicture(
      {required String file, Uint8List? picture}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(file, serializer);
        sse_encode_opt_list_prim_u_8_strict(picture, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 3, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiId3Id3WritePictureConstMeta,
      argValues: [file, picture],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiId3Id3WritePictureConstMeta => const TaskConstMeta(
        debugName: "id3_write_picture",
        argNames: ["file", "picture"],
      );

  @override
  Future<void> crateApiFfmpegInitFfmpeg() {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 4, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiFfmpegInitFfmpegConstMeta,
      argValues: [],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFfmpegInitFfmpegConstMeta => const TaskConstMeta(
        debugName: "init_ffmpeg",
        argNames: [],
      );

  @override
  Future<void> crateApiLoftyLoftyWriteMetadata(
      {required String file, required Metadata metadata, required bool force}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(file, serializer);
        sse_encode_box_autoadd_metadata(metadata, serializer);
        sse_encode_bool(force, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 5, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiLoftyLoftyWriteMetadataConstMeta,
      argValues: [file, metadata, force],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoftyLoftyWriteMetadataConstMeta =>
      const TaskConstMeta(
        debugName: "lofty_write_metadata",
        argNames: ["file", "metadata", "force"],
      );

  @override
  Future<void> crateApiLoftyLoftyWritePicture(
      {required String file, Uint8List? picture, required bool force}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(file, serializer);
        sse_encode_opt_list_prim_u_8_strict(picture, serializer);
        sse_encode_bool(force, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 6, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_unit,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiLoftyLoftyWritePictureConstMeta,
      argValues: [file, picture, force],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiLoftyLoftyWritePictureConstMeta =>
      const TaskConstMeta(
        debugName: "lofty_write_picture",
        argNames: ["file", "picture", "force"],
      );

  @override
  Future<(Metadata, Properties)> crateApiFfmpegReadFile(
      {required String file}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        final serializer = SseSerializer(generalizedFrbRustBinding);
        sse_encode_String(file, serializer);
        pdeCallFfi(generalizedFrbRustBinding, serializer,
            funcId: 7, port: port_);
      },
      codec: SseCodec(
        decodeSuccessData: sse_decode_record_metadata_properties,
        decodeErrorData: sse_decode_AnyhowException,
      ),
      constMeta: kCrateApiFfmpegReadFileConstMeta,
      argValues: [file],
      apiImpl: this,
    ));
  }

  TaskConstMeta get kCrateApiFfmpegReadFileConstMeta => const TaskConstMeta(
        debugName: "read_file",
        argNames: ["file"],
      );

  @protected
  AnyhowException dco_decode_AnyhowException(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return AnyhowException(raw as String);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  double dco_decode_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  Metadata dco_decode_box_autoadd_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_metadata(raw);
  }

  @protected
  int dco_decode_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  double dco_decode_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as double;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<(String, Metadata, Properties)>
      dco_decode_list_record_string_metadata_properties(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_record_string_metadata_properties)
        .toList();
  }

  @protected
  Metadata dco_decode_metadata(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 11)
      throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return Metadata(
      title: dco_decode_opt_String(arr[0]),
      artist: dco_decode_opt_String(arr[1]),
      album: dco_decode_opt_String(arr[2]),
      albumArtist: dco_decode_opt_String(arr[3]),
      trackNumber: dco_decode_opt_box_autoadd_u_8(arr[4]),
      trackTotal: dco_decode_opt_box_autoadd_u_8(arr[5]),
      discNumber: dco_decode_opt_box_autoadd_u_8(arr[6]),
      discTotal: dco_decode_opt_box_autoadd_u_8(arr[7]),
      date: dco_decode_opt_String(arr[8]),
      genre: dco_decode_opt_String(arr[9]),
      frontCover: dco_decode_opt_list_prim_u_8_strict(arr[10]),
    );
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  double? dco_decode_opt_box_autoadd_f_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_f_64(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_32(raw);
  }

  @protected
  int? dco_decode_opt_box_autoadd_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_u_8(raw);
  }

  @protected
  Uint8List? dco_decode_opt_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_list_prim_u_8_strict(raw);
  }

  @protected
  Properties dco_decode_properties(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 10)
      throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return Properties(
      durationSec: dco_decode_opt_box_autoadd_f_64(arr[0]),
      cueStartSec: dco_decode_opt_box_autoadd_f_64(arr[1]),
      cueDurationSec: dco_decode_opt_box_autoadd_f_64(arr[2]),
      codec: dco_decode_opt_String(arr[3]),
      sampleFormat: dco_decode_opt_String(arr[4]),
      sampleRate: dco_decode_opt_box_autoadd_u_32(arr[5]),
      bitsPerRawSample: dco_decode_opt_box_autoadd_u_8(arr[6]),
      bitsPerCodedSample: dco_decode_opt_box_autoadd_u_8(arr[7]),
      bitRate: dco_decode_opt_box_autoadd_u_32(arr[8]),
      channels: dco_decode_opt_box_autoadd_u_8(arr[9]),
    );
  }

  @protected
  (Metadata, Properties) dco_decode_record_metadata_properties(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2) {
      throw Exception('Expected 2 elements, got ${arr.length}');
    }
    return (
      dco_decode_metadata(arr[0]),
      dco_decode_properties(arr[1]),
    );
  }

  @protected
  (String, Metadata, Properties) dco_decode_record_string_metadata_properties(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3) {
      throw Exception('Expected 3 elements, got ${arr.length}');
    }
    return (
      dco_decode_String(arr[0]),
      dco_decode_metadata(arr[1]),
      dco_decode_properties(arr[2]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  AnyhowException sse_decode_AnyhowException(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_String(deserializer);
    return AnyhowException(inner);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  double sse_decode_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_f_64(deserializer));
  }

  @protected
  Metadata sse_decode_box_autoadd_metadata(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_metadata(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_32(deserializer));
  }

  @protected
  int sse_decode_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_u_8(deserializer));
  }

  @protected
  double sse_decode_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getFloat64();
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<(String, Metadata, Properties)>
      sse_decode_list_record_string_metadata_properties(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <(String, Metadata, Properties)>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_record_string_metadata_properties(deserializer));
    }
    return ans_;
  }

  @protected
  Metadata sse_decode_metadata(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_title = sse_decode_opt_String(deserializer);
    var var_artist = sse_decode_opt_String(deserializer);
    var var_album = sse_decode_opt_String(deserializer);
    var var_albumArtist = sse_decode_opt_String(deserializer);
    var var_trackNumber = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_trackTotal = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_discNumber = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_discTotal = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_date = sse_decode_opt_String(deserializer);
    var var_genre = sse_decode_opt_String(deserializer);
    var var_frontCover = sse_decode_opt_list_prim_u_8_strict(deserializer);
    return Metadata(
        title: var_title,
        artist: var_artist,
        album: var_album,
        albumArtist: var_albumArtist,
        trackNumber: var_trackNumber,
        trackTotal: var_trackTotal,
        discNumber: var_discNumber,
        discTotal: var_discTotal,
        date: var_date,
        genre: var_genre,
        frontCover: var_frontCover);
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  double? sse_decode_opt_box_autoadd_f_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_f_64(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_32(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int? sse_decode_opt_box_autoadd_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_u_8(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Uint8List? sse_decode_opt_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_list_prim_u_8_strict(deserializer));
    } else {
      return null;
    }
  }

  @protected
  Properties sse_decode_properties(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_durationSec = sse_decode_opt_box_autoadd_f_64(deserializer);
    var var_cueStartSec = sse_decode_opt_box_autoadd_f_64(deserializer);
    var var_cueDurationSec = sse_decode_opt_box_autoadd_f_64(deserializer);
    var var_codec = sse_decode_opt_String(deserializer);
    var var_sampleFormat = sse_decode_opt_String(deserializer);
    var var_sampleRate = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_bitsPerRawSample = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_bitsPerCodedSample = sse_decode_opt_box_autoadd_u_8(deserializer);
    var var_bitRate = sse_decode_opt_box_autoadd_u_32(deserializer);
    var var_channels = sse_decode_opt_box_autoadd_u_8(deserializer);
    return Properties(
        durationSec: var_durationSec,
        cueStartSec: var_cueStartSec,
        cueDurationSec: var_cueDurationSec,
        codec: var_codec,
        sampleFormat: var_sampleFormat,
        sampleRate: var_sampleRate,
        bitsPerRawSample: var_bitsPerRawSample,
        bitsPerCodedSample: var_bitsPerCodedSample,
        bitRate: var_bitRate,
        channels: var_channels);
  }

  @protected
  (Metadata, Properties) sse_decode_record_metadata_properties(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_metadata(deserializer);
    var var_field1 = sse_decode_properties(deserializer);
    return (var_field0, var_field1);
  }

  @protected
  (String, Metadata, Properties) sse_decode_record_string_metadata_properties(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 = sse_decode_String(deserializer);
    var var_field1 = sse_decode_metadata(deserializer);
    var var_field2 = sse_decode_properties(deserializer);
    return (var_field0, var_field1, var_field2);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_AnyhowException(
      AnyhowException self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.message, serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_f_64(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_metadata(
      Metadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_metadata(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_32(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_8(self, serializer);
  }

  @protected
  void sse_encode_f_64(double self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putFloat64(self);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_record_string_metadata_properties(
      List<(String, Metadata, Properties)> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_record_string_metadata_properties(item, serializer);
    }
  }

  @protected
  void sse_encode_metadata(Metadata self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_String(self.title, serializer);
    sse_encode_opt_String(self.artist, serializer);
    sse_encode_opt_String(self.album, serializer);
    sse_encode_opt_String(self.albumArtist, serializer);
    sse_encode_opt_box_autoadd_u_8(self.trackNumber, serializer);
    sse_encode_opt_box_autoadd_u_8(self.trackTotal, serializer);
    sse_encode_opt_box_autoadd_u_8(self.discNumber, serializer);
    sse_encode_opt_box_autoadd_u_8(self.discTotal, serializer);
    sse_encode_opt_String(self.date, serializer);
    sse_encode_opt_String(self.genre, serializer);
    sse_encode_opt_list_prim_u_8_strict(self.frontCover, serializer);
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_f_64(double? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_f_64(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_32(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_32(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_u_8(int? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_u_8(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_list_prim_u_8_strict(
      Uint8List? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_list_prim_u_8_strict(self, serializer);
    }
  }

  @protected
  void sse_encode_properties(Properties self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_opt_box_autoadd_f_64(self.durationSec, serializer);
    sse_encode_opt_box_autoadd_f_64(self.cueStartSec, serializer);
    sse_encode_opt_box_autoadd_f_64(self.cueDurationSec, serializer);
    sse_encode_opt_String(self.codec, serializer);
    sse_encode_opt_String(self.sampleFormat, serializer);
    sse_encode_opt_box_autoadd_u_32(self.sampleRate, serializer);
    sse_encode_opt_box_autoadd_u_8(self.bitsPerRawSample, serializer);
    sse_encode_opt_box_autoadd_u_8(self.bitsPerCodedSample, serializer);
    sse_encode_opt_box_autoadd_u_32(self.bitRate, serializer);
    sse_encode_opt_box_autoadd_u_8(self.channels, serializer);
  }

  @protected
  void sse_encode_record_metadata_properties(
      (Metadata, Properties) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_metadata(self.$1, serializer);
    sse_encode_properties(self.$2, serializer);
  }

  @protected
  void sse_encode_record_string_metadata_properties(
      (String, Metadata, Properties) self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.$1, serializer);
    sse_encode_metadata(self.$2, serializer);
    sse_encode_properties(self.$3, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
